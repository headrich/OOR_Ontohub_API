// An ontology base.
interface OntologyBase {

    Repository  selectRepository(in string byIri, in string byName);
    Repository  selectRepositoryByIri(in string byIri);                      // Derived
    Repository  selectRepositoryByName(in string byName);                     // Derived
    string   insertRepository(in Repository repository);
    void     deleteRepository(in Repository repository);

    Ontology[] selectOntologies(in string byIri, in string byName, in string byCategory, in string byGroup, in string byPrefix, in Language byLanguage, in Repository byRepository, in string bySymbolName);
    Ontology[] selectOntologiesByIri(in string byIri);                 // Derived
    Ontology[] selectOntologiesByName(in string byName);               // Derived
    Ontology[] selectOntologiesByCategory(in string byCategory);       // Derived
    Ontology[] selectOntologiesByGroup(in string byGroup);             // Derived
    Ontology[] selectOntologiesByPrefix(in string byPrefix);           // Derived
    Ontology[] selectOntologiesByLanguage(in Language byLanguage);     // Derived
    Ontology[] selectOntologiesByRepository(in Repository byRepository);        // Derived
    Ontology[] selectOntologiesBySymbolName(in string bySymbolName);   // Derived
    Ontology[] selectOntologies();                                     // Derived

}

// A repository as a set of mutually complementary ontologies.
interface Repository {

    Ontology[] selectOntologiesByIri(in string byIri);                 // Derived
    Ontology[] selectOntologiesByName(in string byName);               // Derived
    Ontology[] selectOntologiesByCategory(in string byCategory);       // Derived
    Ontology[] selectOntologiesByGroup(in string byGroup);             // Derived
    Ontology[] selectOntologiesByPrefix(in string byPrefix);           // Derived
    Ontology[] selectOntologiesByLanguage(in Language byLanguage);     // Derived
    Ontology[] selectOntologiesBySymbolName(in string bySymbolName);   // Derived
    Ontology[] selectOntologies();                                     // Derived

    string     insertOntology(in Ontology ontology);
    void       deleteOntology(in Ontology ontology);

    string     getIri();
    string     getName();

    void       set(in string iri, in string name);
    void       setIri(in string iri);                                  // Derived
    void       setName(in string name);                                // Derived

}

// An ontology.
interface Ontology {

    OntologyVersion  selectVersion(in string byIri, in integer byRecentness);
    OntologyVersion  selectVersionByIri(in string byIri);
    OntologyVersion  selectVersionByRecentness(in string byRecentness);
    OntologyVersion  selectMostRecentVersion();
    string           insertVersion(in OntologyVersion version);
    void             deleteVersion(in OntologyVersion version);

    string           getName();
    string[]         getCategories();
    string[]         getGroups();
    string[]         getPrefixes();
    Language         getLanguage();
    Repository       getRepository();

    void             set(in string name, in string[] categories, in string[] groups, in string[] prefixes, in Language laguage);
    void             setName(in string name);                          // Derived
    void             addCategory(in string category);                  // Derived
    void             delCateogry(in string category);                  // Derived
    void             addGroup(in string group);                        // Derived
    void             delGroup(in string group);                        // Derived
    void             addPrefix(in string prefix);                      // Derived
    void             delPrefix(in string prefix);                      // Derived
    void             setLanguage(in Language language);                // Derived

}

// An ontology version.
interface OntologyVersion {

    char[]              getFile();
    Entry[]             getSymbols();
    Entry[]             getSentences();
    Entry[]             getEntries();    // Symbols and Sentences

    OntologyMetrics     getMetrics();
    void                setMetrics();

    Note[]              selectNotes(in string byAuthor);
    Note[]              selectNotesByAuthor(in string byAuthor);
    Metadatum[]         selectMetadata();

}

interface Entry {

    string     getIri();
    string     getName();

    void       set(in string iri, in string name);
    void       setIri(in string iri);                                  // Derived
    void       setName(in string name);                                // Derived

}


interface Language {
  // to be done
}

interface OntologyMetrics {
  // to be done
}
