package org.oor.persistence;


/**
* org/oor/persistence/_RepositoryStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from src/Ontology.idl
* Dienstag, 30. Juli 2013 15:56 Uhr MESZ
*/

public class _RepositoryStub extends org.omg.CORBA.portable.ObjectImpl implements org.oor.persistence.Repository
{

  public String getName (org.oor.persistence.Iri iri)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getName", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                $in = _invoke ($out);
                String $result = org.oor.persistence.TextHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getName (iri        );
            } finally {
                _releaseReply ($in);
            }
  } // getName

  public void setName (org.oor.persistence.Iri iri, String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setName", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                org.oor.persistence.TextHelper.write ($out, name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setName (iri, name        );
            } finally {
                _releaseReply ($in);
            }
  } // setName

  public void getOntologyIriList (org.oor.persistence.Iri iri, org.oor.persistence.IriListHolder ontologyIriList)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getOntologyIriList", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                $in = _invoke ($out);
                ontologyIriList.value = org.oor.persistence.IriListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getOntologyIriList (iri, ontologyIriList        );
            } finally {
                _releaseReply ($in);
            }
  } // getOntologyIriList

  public void getOntologyFractumList (org.oor.persistence.Iri iri, org.oor.persistence.OntologyFractumListHolder ontologyFractumList)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getOntologyFractumList", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                $in = _invoke ($out);
                ontologyFractumList.value = org.oor.persistence.OntologyFractumListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getOntologyFractumList (iri, ontologyFractumList        );
            } finally {
                _releaseReply ($in);
            }
  } // getOntologyFractumList

  public void getOntologyContentList (org.oor.persistence.Iri iri, org.oor.persistence.OntologyContentListHolder ontologyContentList)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getOntologyContentList", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                $in = _invoke ($out);
                ontologyContentList.value = org.oor.persistence.OntologyContentListHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getOntologyContentList (iri, ontologyContentList        );
            } finally {
                _releaseReply ($in);
            }
  } // getOntologyContentList

  public void getRepositoryFractum (org.oor.persistence.Iri iri, org.oor.persistence.RepositoryFractumHolder repositoryFractum)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRepositoryFractum", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                $in = _invoke ($out);
                repositoryFractum.value = org.oor.persistence.RepositoryFractumHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getRepositoryFractum (iri, repositoryFractum        );
            } finally {
                _releaseReply ($in);
            }
  } // getRepositoryFractum

  public void getRepositoryContent (org.oor.persistence.Iri iri, org.oor.persistence.RepositoryContentHolder repositoryContent)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRepositoryContent", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                $in = _invoke ($out);
                repositoryContent.value = org.oor.persistence.RepositoryContentHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getRepositoryContent (iri, repositoryContent        );
            } finally {
                _releaseReply ($in);
            }
  } // getRepositoryContent

  public void setOntologyIriList (org.oor.persistence.Iri iri, org.oor.persistence.Iri[] ontologyIriList)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setOntologyIriList", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                org.oor.persistence.IriListHelper.write ($out, ontologyIriList);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setOntologyIriList (iri, ontologyIriList        );
            } finally {
                _releaseReply ($in);
            }
  } // setOntologyIriList

  public void addOntology (org.oor.persistence.Iri iri, org.oor.persistence.Iri ontologyIri)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("addOntology", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                org.oor.persistence.IriHelper.write ($out, ontologyIri);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                addOntology (iri, ontologyIri        );
            } finally {
                _releaseReply ($in);
            }
  } // addOntology

  public void delOntology (org.oor.persistence.Iri iri, org.oor.persistence.Iri ontologyIri)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delOntology", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                org.oor.persistence.IriHelper.write ($out, ontologyIri);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                delOntology (iri, ontologyIri        );
            } finally {
                _releaseReply ($in);
            }
  } // delOntology

  public void setRepositoryFractum (org.oor.persistence.Iri iri, org.oor.persistence.RepositoryFractum repositoryFractum)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setRepositoryFractum", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                org.oor.persistence.RepositoryFractumHelper.write ($out, repositoryFractum);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setRepositoryFractum (iri, repositoryFractum        );
            } finally {
                _releaseReply ($in);
            }
  } // setRepositoryFractum

  public void setRepositoryContent (org.oor.persistence.Iri iri, org.oor.persistence.RepositoryContent repositoryContent)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setRepositoryContent", true);
                org.oor.persistence.IriHelper.write ($out, iri);
                org.oor.persistence.RepositoryContentHelper.write ($out, repositoryContent);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setRepositoryContent (iri, repositoryContent        );
            } finally {
                _releaseReply ($in);
            }
  } // setRepositoryContent

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:org/oor/persistence/Repository:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _RepositoryStub
